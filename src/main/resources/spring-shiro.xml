<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/aop
			http://www.springframework.org/schema/aop/spring-aop.xsd">
	
	<context:annotation-config />
	
	<!--设置了生成bean的文件目录
	<context:component-scan base-package="com.bit.scm.*,com.bit.common"/>
	-->
	
	<!-- 缓存管理器 使用Ehcache实现 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>
    
    <!-- 凭据匹配器 -->
    <bean id="credentialsMatcher" class="com.bit.common.authorization.RetryTimesLtdHashedCredentialsMatcher">
    		<constructor-arg ref="cacheManager"/>
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="2"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>
	
	<!-- Define the Shiro Realm implementation to connect to back-end security datasource. -->
	<bean id="dbRealm" class="com.bit.common.authorization.DbRealm"><!--
        <property name="userService" ref="userService"/>-->
        <property name="credentialsMatcher" ref="credentialsMatcher"/><!-- 
        <property name="cacheManager" ref="cacheManager"/> -->
        <property name="cachingEnabled" value="true"/>
        <property name="authenticationCachingEnabled" value="true"/>
        <property name="authenticationCacheName" value="authenticationCache"/>
        <property name="authorizationCachingEnabled" value="true"/>
        <property name="authorizationCacheName" value="authorizationCache"/>
	</bean>
	
	<!-- Session id generator  -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
	
	<!-- Session cookie template -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!--<constructor-arg value="sid"/>-->
	    <property name="name" value="sid"/>
	    <property name="httpOnly" value="true"/>
	    <property name="maxAge" value="180000"/>
	</bean>
	
	<!-- 会话DAO -->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>

    <!-- 会话验证调度器，1800000毫秒 -->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <property name="sessionValidationInterval" value="1800000"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>
	
	<!-- 会话管理器 -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
	    <property name="globalSessionTimeout" value="1800000"/>
	    <property name="deleteInvalidSessions" value="true"/>
	    <property name="sessionValidationSchedulerEnabled" value="true"/>
	    <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
	    <property name="sessionDAO" ref="sessionDAO"/>
	    <property name="sessionIdCookieEnabled" value="true"/>
	    <property name="sessionIdCookie" ref="sessionIdCookie"/>
	</bean>
	
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="dbRealm" />
	    <property name="sessionManager" ref="sessionManager"/>
	    <property name="cacheManager" ref="cacheManager"/>
		<!-- By default the servlet container sessions will be used.  Uncomment this line
			 to use shiro's native sessions (see the JavaDoc for more): -->
		<!-- <property name="sessionMode" value="native"/> -->
	</bean>
	
	<!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
	<!--
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>
    -->

    <!-- 基于Form表单的身份验证过滤器 -->
    <!-- 
    <bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>
        <property name="rememberMeParam" value="rememberMe"/>
        <property name="loginUrl" value="/jsp/user/login.jsp"/>
    </bean>
    -->
    
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager"/>
		<property name="loginUrl" value="/jsp/user/login.jsp"/>
		<property name="unauthorizedUrl" value="/jsp/unauthorized.jsp"/>
		<!-- override these for application-specific URLs if you like:
			<property name="successUrl" value="/home.jsp"/> -->
		<!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean defined 
		     will be automatically acquired and available via its beanName in chain definitions, 
		     but you can perform instance overrides or name aliases here if you like: -->
		<!-- <property name="filters">
				<util:map>
					<entry key="anAlias" value-ref="someFilter"/>
				</util:map>
			</property> -->
		<property name="filterChainDefinitions">
			<value>
            # some example chain definitions:
            #/admin/** = authc, roles[admin]
            #/docs/** = authc, perms[document:read]
            /index.jsp* = anon
            /user/login = anon
            /user/logout = anon
            /user/add = anon
            /user/* = authc, roles[admin]
            # more URL-to-FilterChain definitions here
			</value>
		</property>
	</bean>
	
	<!-- Define any javax.servlet.Filter beans you want anywhere in this application context.
	     They will automatically be acquired by the 'shiroFilter' bean above and made available 
	     to the 'filterChainDefinitions' property.  Or you can manually/explicitly add them 
	     to the shiroFilter's 'filters' Map if desired. See its JavaDoc for more details.       -->
	<!-- <bean id="someFilter" class="..."/>
	<bean id="anotherFilter" class="..."> ... </bean>-->
    
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	
	<!-- Enable Shiro Annotations for Spring-configured beans.  Only run after the lifecycleBeanProcessor has run: -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor" />
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

	<!-- 
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="org.apache.shiro.authz.UnauthorizedException">/system/error</prop>
			</props>
		</property>
	</bean> -->
</beans>