<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/aop
			http://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:annotation-config />

    <!--设置了生成bean的文件目录
    <context:component-scan base-package="com.bit.scm.*,com.bit.common"/>
    -->

    <bean id="cacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:ehcache.xml" />
        <property name="shared" value="true"></property>
    </bean>

    <!-- 缓存管理器 使用Ehcache实现 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManager" ref="cacheManagerFactory" />
    </bean>

    <!-- 凭据匹配器 -->
    <bean id="credentialsMatcher" class="com.bit.common.auth.RetryTimesLtdHashedCredentialsMatcher">
        <constructor-arg ref="cacheManager"/>
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="2"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>

    <!-- Define the Shiro Realm implementation to connect to back-end security datasource. -->
    <bean id="dbRealm" class="com.bit.common.auth.DbRealm"><!--
        <property name="userService" ref="userService"/> -->
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
        <!--可不设置，使用SecurityManager中的cacheManager 
        <property name="cacheManager" ref="cacheManager"/> -->
        <property name="cachingEnabled" value="true"/>
        <property name="authenticationCachingEnabled" value="true"/>
        <property name="authenticationCacheName" value="authenticationCache"/>
        <property name="authorizationCachingEnabled" value="true"/>
        <property name="authorizationCacheName" value="authorizationCache"/>
    </bean>

    <!-- configure admin and its password-->
    <bean id="iniRealm" class="org.apache.shiro.realm.text.IniRealm">
        <constructor-arg name="resourcePath"  value="classpath:realm.ini"></constructor-arg>
    </bean>

    <!-- Session id generator  -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

    <!-- Session cookie template -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!--<constructor-arg value="sid"/>-->
        <property name="name" value="ACCSESSIONID"/>
        <property name="httpOnly" value="true"/>
        <!-- maxAge时间单位为秒 -->
        <property name="maxAge" value="180000"/>
    </bean>

    <!-- 会话DAO --><!--
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean> -->
    <bean id="redisSessionDAO" class="com.bit.common.auth.RedisSessionDao">
        <property name="activeSessionsCacheName" value="shiroActiveSessionCache"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"></property>
    </bean>

    <!-- 会话验证调度器，1800000毫秒             org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler-->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <!-- maxAge时间单位为毫秒，不设置默认为3600000ms -->
        <property name="sessionValidationInterval" value="1800000"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <bean id="shiroSessionFactory" class="com.bit.common.auth.ShiroSessionFactory"/>
    <bean id="shiroSessionListenser" class="com.bit.common.auth.ShiroSessionListenser"/>

    <!-- 会话管理器,WebSessionManager、SecurityManager、Realm都有cacheManager属性，只设置一个，其他几个是相同的，如果分别设置，就不同
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager"> -->
    <bean id="sessionManager" class="com.bit.common.auth.ShiroSessionManager">
        <property name="sessionFactory" ref="shiroSessionFactory"/>
        <property name="sessionListeners" ref="shiroSessionListenser"/>
        <!-- maxAge时间单位为毫秒 -->
        <property name="globalSessionTimeout" value="600000"/>
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <property name="sessionDAO" ref="redisSessionDAO"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- 可设置一个Realm，也可设置多个Realm
        <property name="realm" ref="dbRealm" />-->
        <property name="realms">
            <list>
                <ref bean="iniRealm" />
                <ref bean="dbRealm"/>
            </list>
        </property><!--
        <property name="authenticator" ref="authenticator"/>-->
        <property name="sessionManager" ref="sessionManager"/>
        <property name="cacheManager" ref="cacheManager"/>
        <!-- By default the servlet container sessions will be used.  Uncomment this line
             to use shiro's native sessions (see the JavaDoc for more): -->
        <!-- <property name="sessionMode" value="native"/> -->
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>

    <!-- 配置使用自定义认证器，可以实现多Realm认证，并且可以指定特定Realm处理特定类型的验证
    <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <property name="realms">
            <list>
                <ref bean="iniRealm"/>
                <ref bean="dbRealm"/>
            </list>
        </property> 
        <property name="authenticationStrategy">
            <!-/- 默认是AtLeastOneSuccessfulStrategy -/->
            <bean class="org.apache.shiro.authc.pam.FirstSuccessfulStrategy"></bean>
        </property>
    </bean> -->

    <!-- rememberMeManager管理器，写cookie，取出cookie生成用户信息 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cookie" ref="rememberMeCookie" />
    </bean>

    <!-- 记住我cookie -->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!-- rememberMe是cookie的名字 -->
        <constructor-arg value="rememberMe" />
        <!-- 记住我cookie生效时间30天 -->
        <property name="maxAge" value="2592000" />
    </bean>

    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <!--
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>
    -->

    <!-- 基于Form表单的身份验证过滤器 -->
    <!--  -->
    <bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>
        <property name="rememberMeParam" value="rememberMe"/>
        <property name="loginUrl" value="/user/login"/>
    </bean>


    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!-- 如果没有认证将要跳转的登录地址，http可访问的url，如果不在表单认证过虑器FormAuthenticationFilter中指定此地址就为身份认证地址 -->
        <property name="loginUrl" value="/user/login"/>
        <property name="unauthorizedUrl" value="/jsp/unauthorized.jsp"/>
        <!-- override these for application-specific URLs if you like.
        successUrl配置只是做为一种附加配置，只有session中没有用户请求地址时才会使用successUrl。系统默认的是认证成功后跳转到上一次请求的路径。
        -->
        <property name="successUrl" value="/"/>
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean defined
             will be automatically acquired and available via its beanName in chain definitions,
             but you can perform instance overrides or name aliases here if you like: -->
        <!-- <property name="filters">
                <util:map>
                    <entry key="anAlias" value-ref="someFilter"/>
                </util:map>
            </property> -->
        <property name="filterChainDefinitions">
            <value>
                # anon，authcBasic，auchc，user是认证过滤器，perms，roles，ssl，rest，port是授权过滤器
                # <!-- authc：表示需要认证(登录)才能使用，没有参数 -->
                # <!-- authcBasic：例如/admins/user/**=authcBasic，没有参数，表示httpBasic认证。 -->
                # <!-- user：例如/admins/user/**=user，没有参数，表示必须存在用户，当登入操作时不做检查。 -->
                # some example chain definitions:
                # /docs/** = authc, perms[document:read]
                # <!-- perms[user:add:*]，参数可以写多个，多个时须加上引号，例如/admins/user/**=perms["user:add:*,user:modify:*"]，每个参数都通过才通过。-->
                # /admin/** = authc, roles[admin]
                # <!-- roles["admin,guest"]，每个参数通过才算通过 -->
                # <!-- ssl：例子/admins/user/**=ssl，没有参数，表示安全的url请求，协议为https。  -->
                # <!-- rest：例子/admins/user/**=rest[user]，根据请求的方法，相当于/admins/user/**=perms[user:method] ,其中method为post，get，delete等。 -->
                # <!-- port：例子/admins/user/**=port[8081]，当请求的url的端口不是8081时跳转到schemal://serverName:8081?queryString。 -->
                /index.jsp* = anon
                ###### 无需登录，访问get方法的/user/login   ##########################################################
                /user/login = anon
                ###### 必须对登录的地址设置authc，否则不会执行FormAuthenticationFilter的登录方法，    ###########################
                ###### 会记录登录前访问的地址，登录后跳转到这个地址，如果直接进入登录地址，则会进入/user/login的POST方法返回地址 #####
                /user/login = authc
                /user/logout = logout
                ###### 一个星号只匹配一层路径，千万不能把注释写在权限定义后面，否则权限定义不对  ##############################
                # /user/* = authc, roles[admin]
                ###### 两个星号匹配若干层路径，千万不能把注释写在权限定义后面，否则权限定义不对  ##############################
                # /**/admin/** = authc, roles[admin]
                # more URL-to-FilterChain definitions here
            </value>
        </property>
    </bean>

    <!-- Define any javax.servlet.Filter beans you want anywhere in this application context.
         They will automatically be acquired by the 'shiroFilter' bean above and made available
         to the 'filterChainDefinitions' property.  Or you can manually/explicitly add them
         to the shiroFilter's 'filters' Map if desired. See its JavaDoc for more details.       -->
    <!-- <bean id="someFilter" class="..."/>
    <bean id="anotherFilter" class="..."> ... </bean>-->

    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after the lifecycleBeanProcessor has run. -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor" >
        <property name="proxyTargetClass" value="true" /><!--//为了看session无法获取到的BUG后加上来的，原先没有 20190819-->
    </bean>

    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager" />
    </bean>

    <!-- 未授权异常的处理，进入/system/error.jsp
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="org.apache.shiro.authz.UnauthorizedException">/system/error</prop>
            </props>
        </property>
    </bean> -->

    <!-- 以下是Redis
    <context:property-placeholder location="classpath:redis.properties"/>-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="30"></property>
        <property name="maxTotal" value="100"></property>
        <property name="maxWaitMillis" value="1000"></property>
        <property name="testOnBorrow" value="true"></property>
    </bean>

    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="usePool" value="true"></property>
        <property name="hostName" value="127.0.0.1"></property>
        <property name="port" value="6379"></property>
        <property name="poolConfig" ref="jedisPoolConfig"></property>
    </bean>
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"></property>
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
        </property>
        <!-- 解决读取int类型value值报错的问题 -->
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
        </property>
    </bean>

</beans>