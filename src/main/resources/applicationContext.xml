<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd
			http://www.springframework.org/schema/aop
			http://www.springframework.org/schema/aop/spring-aop.xsd
			http://www.springframework.org/schema/data/jpa
			http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">
	
	<!-- 在spring中@Transaction是通过AOP实现的，而spring对AOP有两种实现方式，
	一种是动态代理，它是通过接口方式实现的，要求所代理的类一定是实现了某一个接口，对一般的类就无法代理，spring默认是这种；
	一种是通过设置proxy-target-class="true"，使用CGLIB实现AOP，CGLIB直接生成二进制码，使得普通类也可以实现AOP。
	在没有设置proxy-target-class="true"时，使用动态代理，是一个临时生成的类，如proxy1，使用普通类时会出现错误。
	对于使用了事物的类无效，只能其代理接口 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	
	<context:property-placeholder location="classpath:persistence.properties" />
	
	<!--设置了生成bean的文件目录，排除@Controller @RestController @ExceptionHandler组件，该组件由SpringMVC配置文件扫描--><!-- -->
	<context:component-scan base-package="com.bit.acc.*,com.bit.common.*" use-default-filters="true">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.RestController"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.RestControllerAdvice"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ExceptionHandler"/>
	</context:component-scan>
	
	<!-- service包
    <context:component-scan base-package="your service package" /> -->
    
    <!-- 配置C3P0数据源，从上面配置文件读取--><!-- 
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${database.driverClassName}"/>
		<property name="jdbcUrl" value="${database.url}"/>
		<property name="user" value="${database.username}"/>
		<property name="password" value="${database.password}"/>
		<property name="initialPoolSize" value="${pool.initialPoolSize}"/>
		<property name="minPoolSize" value="${pool.minPoolSize}"/>
		<property name="maxPoolSize" value="${pool.maxPoolSize}"/>
		<property name="maxIdleTime" value="${pool.maxIdleTime}"/>
		<property name="acquireIncrement" value="${pool.acquireIncrement}"/>
        <property name="idleConnectionTestPeriod" value="${pool.idleConnectionTestPeriod}" />
	</bean> -->
	
	<!-- Druid数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${database.driverClassName}" />
        <property name="url" value="${database.url}" />
        <property name="username" value="${database.username}" />
        <property name="password" value="${database.password}" />
        <property name="initialSize" value="${druid.initialSize}" />
        <property name="maxActive" value="${druid.maxActive}" />
        <property name="maxIdle" value="${druid.maxIdle}" />
        <property name="minIdle" value="${druid.minIdle}" />
        <property name="maxWait" value="${druid.maxWait}" />
        <property name="removeAbandoned" value="${druid.removeAbandoned}" />
        <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" />
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
        <property name="validationQuery" value="${druid.validationQuery}" />
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
        <!-- 关闭 abanded 连接时输出错误日志 -->
        <property name="logAbandoned" value="${druid.logAbandoned}" />
        <!-- 合并多个DruidDataSource的监控数据 -->
        <property name="useGlobalDataSourceStat" value="true" />
        <!-- filters和proxyFilters属性是组合关系的，不是替换的 
        <property name="filters" value="${druid.filters}" />-->
		<property name="proxyFilters">
			<list>
				<ref bean="statFilter" />
			</list>
		</property>
    </bean>
	
	<bean id="statFilter" class="com.alibaba.druid.filter.stat.StatFilter">
		<property name="mergeSql" value="true" />
		<!-- 对执行超过500毫秒，即0.5秒的SQL通过日志输出 -->
		<property name="slowSqlMillis" value="500" />
		<property name="logSlowSql" value="true" />
	</bean>

	<!--
	<bean id="defaultPersistenceUnitManager" class="org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager">
        <property name="persistenceXmlLocation" value="classpath:persistence.xml"/>-->
        <!--  comment dataSourceLooup to use jndi --> <!--
        <property name="dataSourceLookup">
            <bean class="org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup"/>
        </property>
    </bean>
    -->

    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
	    <property name="dataSource" ref="dataSource"/>
	    <!-- 用于指定持久化实现厂商类；如Hibernate为org.hibernate.ejb.HibernatePersistence类。只要有jpaVendorAdapter即可
        <property name="persistenceProvider" value="org.hibernate.ejb.HibernatePersistence"/> -->
        <!--  用于获取JPA持久化单元，默认实现DefaultPersistenceUnitManager用于解决多配置文件情况
        <property name="persistenceUnitManager" ref="defaultPersistenceUnitManager"/>
        <property name="persistenceUnitName" value="hibernatePU"/>-->
		<property name="jpaVendorAdapter" >
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"><!-- 
				<property name="databasePlatform" value="${hibernate.dialect}" />
				<property name="generateDdl" value="${hibernate.generateDdl}"/>
				<property name="showSql" value="${hibernate.show_sql}"/>-->
			</bean> 
		</property>
	    <property name="packagesToScan">
	        <list>
	            <value>com.bit.acc.model</value>
	        </list>
	    </property>
	    <!--允许JPA 加载时修改相应的类文件。具体使用得参考相应的JPA规范实现厂商文档，如Hibernate就不需要指定loadTimeWeaver。-->
        <property name="loadTimeWeaver">
            <bean class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver"/>
        </property>
        <!-- 用于指定一些高级特性，如事务管理，获取具有事务功能的连接对象等，当指定jpaVendorAdapter属性时可以不指定jpaDialect，会自动设置相应的JpaDialect实现
        <property name="jpaDialect">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/>
        </property>-->
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.generateDdl">${hibernate.generateDdl}</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.max_fetch_depth">${hibernate.max_fetch_depth}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.use_sql_comments">${hibernate.use_sql_comments}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				<!-- 采用OracleLobHandler来处理oracle大字段（包括clob和blob），则在程序中不需要引用oracle的特殊类，从而能够保证支持代码支持多数据库 -->
				<prop key="hibernate.connection.SetBigStringTryClob">${hibernate.connection.SetBigStringTryClob}</prop>
				<!-- 告知Hibernate要自动扫描哪些元数据：被注解的类（class）和Hibernate XML映射文件（hbm） -->
				<prop key="hibernate.archive.autodetection">${hibernate.archive.autodetection}</prop>
				<prop key="hibernate.ejb.naming_strategy">${hibernate.ejb.naming_strategy}</prop>
				<prop key="hibernate.connection.charSet">${hibernate.connection.charSet}</prop>
				<!-- 1级和2级缓存都是根据对象id来查找，如果需要加载一个List的时候，就需要用到查询缓存 -->
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
				<prop key="hibernate.cache.provider_configuration">classpath:ehcache.xml</prop>
				<!-- 将hibernate的统计打开来看看到底是不是被缓存了，生成环境设置成false -->
				<prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
				<!-- ENABLE_SELECTIVE不需要在实体内配置hibernate的 @cache标记，只要打上JPA的@cacheable标记即可默认开启该实体的2级缓存 -->
				<prop key="javax.persistence.sharedCache.mode">ENABLE_SELECTIVE</prop>
			</props>  
		</property>
        <!--
		<property name="jpaPropertyMap">  
			<map>  
				<entry key="showSql" value="true"/>
				<entry key="generateDdl" value="false"/>  
				<entry key="hibernate.format_sql" value="true"/>  
				<entry key="hibernate.dialect" value="org.hibernate.dialect.Oracle10gDialect"/>  
			</map>  
		</property>
		-->
    </bean>

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>

	<!-- 基于注释的事务，当注释中发现@Transactional时，使用id为“transactionManager”的事务管理器  -->
	<!-- 如果没有设置transaction-manager的值，则spring以缺省默认的事务管理器来处理事务，默认事务管理器为第一个加载的事务管理器 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	
	<jpa:repositories base-package="com.bit.acc.dao" 
	                          repository-impl-postfix="Impl" 
	                          query-lookup-strategy = "create-if-not-found" 
	                          entity-manager-factory-ref="entityManagerFactory" 
	                          transaction-manager-ref="transactionManager"/>
    
</beans>